{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\G Uday Chandra\\\\PycharmProjects\\\\1\\\\java programs\\\\React\\\\DeepDream\\\\frontend\\\\src\\\\Components\\\\Dalle.js\",\n  _s = $RefreshSig$();\n// import React, { useState } from 'react';\n\n// export default function Dalle() {\n//     const [inputText, setInputText] = useState('');\n\n//     const handleInputChange = (event) => {\n//         setInputText(event.target.value);\n//     };\n\n//     const handleSubmit = (event) => {\n//         event.preventDefault();\n//         // Here, you can perform actions with the inputText state, like sending it to a backend API, processing it, etc.\n//         console.log('Input Text:', inputText);\n//         setInputText(''); // Clear the input after submission, if needed\n//     };\n\n//     return (\n//         <div className=\"container\" style={{ padding: '20px', maxWidth: '600px', marginTop: \"70px\" }}>\n//             <h1>Dalle Text Input</h1>\n//             <p>\n//                 Welcome to the Dalle Text Input page! Enter some text in the input field below and click the submit button\n//                 to perform actions with the text.\n//             </p>\n//             <form onSubmit={handleSubmit}>\n//                 <label htmlFor=\"textInput\">Enter Text:</label>\n//                 <input\n//                     type=\"text\"\n//                     id=\"textInput\"\n//                     value={inputText}\n//                     onChange={handleInputChange}\n//                     placeholder=\"Type your text here\"\n//                     style={{ padding: '10px', marginTop: '10px' }}\n//                 />\n//                 <button type=\"submit\" style={{ marginLeft: \"30px\", marginTop: '10px' }}>Submit</button>\n//             </form>\n//             {inputText && (\n//                 <div style={{ marginTop: '20px' }}>\n//                     <h3>Input Text:</h3>\n//                     <p>{inputText}</p>\n//                 </div>\n//             )}\n//         </div>\n//     );\n// }\n\nimport React, { useState } from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css'; // Import Bootstrap CSS\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Dalle() {\n  _s();\n  const [inputText, setInputText] = useState('');\n  const [imageUrl, setImageUrl] = useState('');\n  const handleInputChange = event => {\n    setInputText(event.target.value);\n    // Call a function to fetch or generate an image URL based on the input text\n    fetchImageUrl(event.target.value);\n  };\n  const fetchImageUrl = async text => {\n    // Use any method (API call, image generation library, etc.) to get the image URL based on the text\n    // For demonstration purposes, using a placeholder image URL here\n    const placeholderImageUrl = `https://via.placeholder.com/500?text=${encodeURIComponent(text)}`;\n    setImageUrl(placeholderImageUrl);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container mt-5\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"mb-4\",\n      children: \"Dalle Text Input\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"mb-4\",\n      children: \"Enter some text in the input field below and see a beautiful image generated based on your text.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: e => e.preventDefault(),\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"textInput\",\n          children: \"Enter Text:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          id: \"textInput\",\n          value: inputText,\n          onChange: handleInputChange,\n          placeholder: \"Type your text here\",\n          className: \"form-control\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 13\n    }, this), imageUrl && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mt-4\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"mb-3\",\n        children: \"Generated Image:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        src: imageUrl,\n        alt: \"Generated\",\n        className: \"img-fluid\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 9\n  }, this);\n}\n_s(Dalle, \"ZSVE+3sADOqCX5zruae0UZHUKLA=\");\n_c = Dalle;\nvar _c;\n$RefreshReg$(_c, \"Dalle\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","Dalle","_s","inputText","setInputText","imageUrl","setImageUrl","handleInputChange","event","target","value","fetchImageUrl","text","placeholderImageUrl","encodeURIComponent","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","e","preventDefault","htmlFor","type","id","onChange","placeholder","src","alt","_c","$RefreshReg$"],"sources":["C:/Users/G Uday Chandra/PycharmProjects/1/java programs/React/DeepDream/frontend/src/Components/Dalle.js"],"sourcesContent":["// import React, { useState } from 'react';\r\n\r\n// export default function Dalle() {\r\n//     const [inputText, setInputText] = useState('');\r\n\r\n//     const handleInputChange = (event) => {\r\n//         setInputText(event.target.value);\r\n//     };\r\n\r\n//     const handleSubmit = (event) => {\r\n//         event.preventDefault();\r\n//         // Here, you can perform actions with the inputText state, like sending it to a backend API, processing it, etc.\r\n//         console.log('Input Text:', inputText);\r\n//         setInputText(''); // Clear the input after submission, if needed\r\n//     };\r\n\r\n//     return (\r\n//         <div className=\"container\" style={{ padding: '20px', maxWidth: '600px', marginTop: \"70px\" }}>\r\n//             <h1>Dalle Text Input</h1>\r\n//             <p>\r\n//                 Welcome to the Dalle Text Input page! Enter some text in the input field below and click the submit button\r\n//                 to perform actions with the text.\r\n//             </p>\r\n//             <form onSubmit={handleSubmit}>\r\n//                 <label htmlFor=\"textInput\">Enter Text:</label>\r\n//                 <input\r\n//                     type=\"text\"\r\n//                     id=\"textInput\"\r\n//                     value={inputText}\r\n//                     onChange={handleInputChange}\r\n//                     placeholder=\"Type your text here\"\r\n//                     style={{ padding: '10px', marginTop: '10px' }}\r\n//                 />\r\n//                 <button type=\"submit\" style={{ marginLeft: \"30px\", marginTop: '10px' }}>Submit</button>\r\n//             </form>\r\n//             {inputText && (\r\n//                 <div style={{ marginTop: '20px' }}>\r\n//                     <h3>Input Text:</h3>\r\n//                     <p>{inputText}</p>\r\n//                 </div>\r\n//             )}\r\n//         </div>\r\n//     );\r\n// }\r\n\r\n\r\nimport React, { useState } from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css'; // Import Bootstrap CSS\r\n\r\nexport default function Dalle() {\r\n    const [inputText, setInputText] = useState('');\r\n    const [imageUrl, setImageUrl] = useState('');\r\n\r\n    const handleInputChange = (event) => {\r\n        setInputText(event.target.value);\r\n        // Call a function to fetch or generate an image URL based on the input text\r\n        fetchImageUrl(event.target.value);\r\n    };\r\n\r\n    const fetchImageUrl = async (text) => {\r\n        // Use any method (API call, image generation library, etc.) to get the image URL based on the text\r\n        // For demonstration purposes, using a placeholder image URL here\r\n        const placeholderImageUrl = `https://via.placeholder.com/500?text=${encodeURIComponent(text)}`;\r\n        setImageUrl(placeholderImageUrl);\r\n    };\r\n\r\n    return (\r\n        <div className=\"container mt-5\">\r\n            <h1 className=\"mb-4\">Dalle Text Input</h1>\r\n            <p className=\"mb-4\">Enter some text in the input field below and see a beautiful image generated based on your text.</p>\r\n            <form onSubmit={(e) => e.preventDefault()}>\r\n                <div className=\"form-group\">\r\n                    <label htmlFor=\"textInput\">Enter Text:</label>\r\n                    <input\r\n                        type=\"text\"\r\n                        id=\"textInput\"\r\n                        value={inputText}\r\n                        onChange={handleInputChange}\r\n                        placeholder=\"Type your text here\"\r\n                        className=\"form-control\"\r\n                    />\r\n                </div>\r\n            </form>\r\n            {imageUrl && (\r\n                <div className=\"mt-4\">\r\n                    <h3 className=\"mb-3\">Generated Image:</h3>\r\n                    <img src={imageUrl} alt=\"Generated\" className=\"img-fluid\" />\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n"],"mappings":";;AAAA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAO,sCAAsC,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAE/C,eAAe,SAASC,KAAKA,CAAA,EAAG;EAAAC,EAAA;EAC5B,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAACO,QAAQ,EAAEC,WAAW,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAE5C,MAAMS,iBAAiB,GAAIC,KAAK,IAAK;IACjCJ,YAAY,CAACI,KAAK,CAACC,MAAM,CAACC,KAAK,CAAC;IAChC;IACAC,aAAa,CAACH,KAAK,CAACC,MAAM,CAACC,KAAK,CAAC;EACrC,CAAC;EAED,MAAMC,aAAa,GAAG,MAAOC,IAAI,IAAK;IAClC;IACA;IACA,MAAMC,mBAAmB,GAAG,wCAAwCC,kBAAkB,CAACF,IAAI,CAAC,EAAE;IAC9FN,WAAW,CAACO,mBAAmB,CAAC;EACpC,CAAC;EAED,oBACIb,OAAA;IAAKe,SAAS,EAAC,gBAAgB;IAAAC,QAAA,gBAC3BhB,OAAA;MAAIe,SAAS,EAAC,MAAM;MAAAC,QAAA,EAAC;IAAgB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAC1CpB,OAAA;MAAGe,SAAS,EAAC,MAAM;MAAAC,QAAA,EAAC;IAAgG;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,eACxHpB,OAAA;MAAMqB,QAAQ,EAAGC,CAAC,IAAKA,CAAC,CAACC,cAAc,CAAC,CAAE;MAAAP,QAAA,eACtChB,OAAA;QAAKe,SAAS,EAAC,YAAY;QAAAC,QAAA,gBACvBhB,OAAA;UAAOwB,OAAO,EAAC,WAAW;UAAAR,QAAA,EAAC;QAAW;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAO,CAAC,eAC9CpB,OAAA;UACIyB,IAAI,EAAC,MAAM;UACXC,EAAE,EAAC,WAAW;UACdhB,KAAK,EAAEP,SAAU;UACjBwB,QAAQ,EAAEpB,iBAAkB;UAC5BqB,WAAW,EAAC,qBAAqB;UACjCb,SAAS,EAAC;QAAc;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC3B,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACD;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACJ,CAAC,EACNf,QAAQ,iBACLL,OAAA;MAAKe,SAAS,EAAC,MAAM;MAAAC,QAAA,gBACjBhB,OAAA;QAAIe,SAAS,EAAC,MAAM;QAAAC,QAAA,EAAC;MAAgB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAC1CpB,OAAA;QAAK6B,GAAG,EAAExB,QAAS;QAACyB,GAAG,EAAC,WAAW;QAACf,SAAS,EAAC;MAAW;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC3D,CACR;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACA,CAAC;AAEd;AAAClB,EAAA,CA1CuBD,KAAK;AAAA8B,EAAA,GAAL9B,KAAK;AAAA,IAAA8B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}